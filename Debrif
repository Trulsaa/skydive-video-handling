#!/bin/bash

# On a Mac this script requires GNU find. Can be installed by running "brew install findutils --with-default-names" and restarting the Mac

# Reset algorithm for testing (befor test start copy all files from source to a directory called test on Desktop)
# This part of the script is only written for testing
if [[ $1 = "-reset" ]]; then
  cp -n ~/Desktop/test/* /Volumes/NO\ NAME/DCIM/100GOPRO/
  echo "Files in /Volumes/NO\ NAME/DCIM/100GOPRO/"
  ls -1 /Volumes/NO\ NAME/DCIM/100GOPRO/
  rm -d ~/Desktop/$(date +%Y%m%d)/*
  rm ~/Desktop/$(date +%Y%m%d)/.filenames
  rm ~/Desktop/$(date +%Y%m%d)/.filenamesall
  echo "All files in ~/Desktop/$(date +%Y%m%d)/ deleted"
  exit 1
fi

# Sets the variable $photografer to $1. If no input photografer is set to T
# Else $photografer is set to input $1 and how many of the newest videos should be copied is asked for
if [[ $1 = "" || $1 = "T" ]]; then
  echo "Photografer = T"
  photografer="T"
else
  echo "Photografer = $1"
  photografer="$1"

# Asks for input and recors it to videos
  read -p "How many of the newest videos should be copied (default = 1)? " videos

# Sets default value for videos to 1
  videos=${videos:-1}
fi

#Get the current users full name
username=$(finger `whoami` | awk -F: '{ print $3 }' | head -n1 | gsed 's/^ //')

# Finds the full path to the video files on the external volume
#gfind /Volumes -type d \( -path /Volumes/Macintosh\ HD -o -path /Volumes/MobileBackups -o -path /Volumes/Time\ Machine\ Backups -o -path /Volumes/"$username" \) -prune -o -iname '*.MP4' -print

# Gives onely file names
#gfind /Volumes -type d \( -path /Volumes/Macintosh\ HD -o -path /Volumes/MobileBackups -o -path /Volumes/Time\ Machine\ Backups -o -path /Volumes/"$username" \) -prune -o -iname '*.MP4' -print |gsed 's#.*/##'

#Gives file path to folder with *.MP4 (Requires GNU find)
#gfind /Volumes -type d \( -path /Volumes/Macintosh\ HD -o -path /Volumes/MobileBackups -o -path /Volumes/Time\ Machine\ Backups -o -path /Volumes/"$username" \) -prune -o -iname '*.MP4' -printf '%h\n' | sort | uniq

# Counts the number of uniq directorys with .MP4 inside (Requires GNU find)
var=($(gfind /Volumes -type d \( -path /Volumes/Macintosh\ HD -o -path /Volumes/MobileBackups -o -path /Volumes/Time\ Machine\ Backups -o -path /Volumes/"$username" \) -prune -o -iname '*.MP4' -printf '%h\n' | sort | uniq | wc -l))
dirs_with_mp4=${var[0]}

# Checks if there is more or less than one path with .MP4 files and exits if true.
if [[ $dirs_with_mp4 != 1 ]];
then
  echo "There are $dirs_with_mp4 directorys with MP4 files. Only number accepted is 1. Script stopped"
  exit 1
fi

# Creates a variable and sets it to the directory where there are MP4 files
folder=$(gfind /Volumes -type d \( -path /Volumes/Macintosh\ HD -o -path /Volumes/MobileBackups -o -path /Volumes/Time\ Machine\ Backups -o -path /Volumes/"$username" \) -prune -o -iname '*.MP4' -printf '%h\n' | sort | uniq)
# echo "The folder variable was set to $folder"

# # Creates a variable and sets it to the volume where there are MP4 file
volume=$(gfind /Volumes -type d \( -path /Volumes/Macintosh\ HD -o -path /Volumes/MobileBackups -o -path /Volumes/Time\ Machine\ Backups -o -path /Volumes/"$username" \) -prune -o -iname '*.MP4' -printf '%h\n' | sort | uniq | gsed 's/\/Volumes\/*//' | gsed 's/\/.*//')

# Creates a variable with the arkive direktory path with name set to todays date
arkive=~/Desktop/$(date +%Y%m%d)
# echo "arkive is $arkive"

# Creates a new arkive path
mkdir -p "$arkive"
# echo "$arkive was created"

# Creates a hidden file with all of the filenames in folder
ls -1 "$folder" >> "$arkive"/.filenamesall

# remove lines with .LRV and .THM from .filenames
gsed -i '/.LRV/d' "$arkive"/.filenamesall
gsed -i '/.THM/d' "$arkive"/.filenamesall

# Sort video filenames from newst to oldest and only keep the $videos newest ones if photografer not equal to T
if [[ $photografer != "T" ]]; then
  sort -r "$arkive"/.filenamesall | head -n $videos >> "$arkive"/.filenames
else
  cp "$arkive"/.filenamesall "$arkive"/.filenames
fi

#Moves or copies all files from the source to the arkive, but does not overwrite existing files
# and appends $photografer_ to the front of all the filenames moved or copied filenames
while read filename; do
  if [[ $photografer = "T" ]]; then
    mv -n "$folder"/$filename "$arkive"/"$photografer"_$filename;
    echo ""$folder"/$filename -> moved to -> "$arkive"/"$photografer"_$filename"
  else
    cp -n "$folder"/$filename "$arkive"/"$photografer"_$filename;
    echo ""$folder"/$filename -> copied to -> "$arkive"/"$photografer"_$filename"
  fi
done <"$arkive"/.filenames

# Deletes .LRV and .THM files from source if $photografer equals T
if [[ $photografer = "T" ]]; then
  rm "$folder"/*.LRV
  rm "$folder"/*.THM
  echo "All .LRV and .THM files were deleted from the source"
fi

# Deletes temp files
rm "$arkive"/.filenames
rm "$arkive"/.filenamesall

# Umounts the source disk
diskutil unmount /Volumes/"$volume"

# # Finds the newest file in the arkive
# unset -v latest
# for file in "$arkive"/*; do
#   [[ $file -nt $latest ]] && latest=$file
# done

# Opens the arkive folder
open "$arkive"

# Opens the newest video in the arkive folder
#open "$file"

#Opens all of the videos in the arkive folder
#open "$arkive"/*.MP4

#Opens the newest file in the arkive folder flipped up side down and in full screen usin VLC
#/Applications/VLC.app/Contents/MacOS/VLC "$file" --video-filter=transform --transform-type=180 --fullscreen
